
CentOS7默认数据库是mariadb,配置等用着不习惯,
因此决定改成mysql,但是CentOS7的yum源中默认好像是没有mysql的。
为了解决这个问题，我们要先下载mysql的repo源

1、下载 mysql repo源
$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm


2、安装 mysql-community-release-el7-5.noarch.rpm 包
$ sudo rpm -ivh mysql-community-release-el7-5.noarch.rpm

安装这个包后，会获得两个mysql的yum repo源：
/etc/yum.repos.d/mysql-community.repo，
/etc/yum.repos.d/mysql-community-source.repo


3、安装mysql
$ sudo yum install mysql-server

4、重置mysql密码
$ mysql -u root

登录时有可能报这样的错：
ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)，
原因是/var/lib/mysql的访问权限问题


5、把/var/lib/mysql的拥有者改为当前用户
$ sudo chown -R root:root /var/lib/mysql

6、重启mysql
$ service mysqld restart


7、重置密码
$ mysql -u root 
mysql > use mysql;
mysql > update user set password=password('123456') where user='root';
mysql > exit;

8、开启mysql远程连接
$ mysql -u root 
mysql > use mysql;
mysql > update user set host='%' where user='root';

如果执行update语句时出现ERROR 1062 (23000): Duplicate entry '%-root' for key 'PRIMARY' 错误，
说明有多个ROOT用户纪录在USER表中了


查看一下host是否已经有了%这个值，有了就可以了.
mysql> select host,user from user where user='root';

对用户授权：
mysql > grant all privileges on *.* to 'root'@'%' with grant option;

刷新：
mysql> flush privileges;


9、备份mysql
https://www.cnblogs.com/SQL888/p/5751631.html

1>、直接cp,tar复制数据库文件  备份速度快   恢复速度快   灵活性低   功能弱  很少使用    适用数据量较小

向数据库施加读锁
mysql> FLUSH TABLES WITH READ LOCK;    #向所有表施加读锁

备份数据文件
[root@node1 ~]# mkdir /backup   #创建文件夹存放备份数据库文件
[root@node1 ~]# cp -a /var/lib/mysql/* /backup     #保留权限的拷贝源数据文件
[root@node1 ~]# ls /backup   #查看目录下的文件
employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql.sock  test


模拟数据丢失并恢复
root@node1 ~]# rm -rf /var/lib/mysql/*    #删除数据库的所有文件
[root@node1 ~]# service mysqld restart   #重启MySQL, 如果是编译安装的应该不能启动, 
如果rpm安装则会重新初始化数据库
mysql> SHOW DATABASES;    #因为我们是rpm安装的, 
连接到MySQL进行查看, 发现数据丢失了！

[root@node1 ~]# cp -a /backup/* /var/lib/mysql/    #将备份的数据文件拷贝回去
[root@node1 ~]# service mysqld restart  #重启MySQL


#重新连接数据并查看
mysql> SHOW DATABASES;    #数据库已恢复




2>、mysqldump+复制BIN LOGS    数据量一般

我们通过mysqldump进行一次完全备份, 再修改表中的数据, 
然后再通过binary log进行恢复 二进制日志需要在mysql配置文件中添加 log_bin=on 开启
https://dev.mysql.com/doc/refman/5.7/en/mysqldump.html



 [root@node1 ~]# mysql -uroot -p -e 'SHOW MASTER STATUS'   #查看当前二进制文件的状态, 并记录下position的数字
 [root@node1 ~]# mysqldump --all-databases --lock-all-tables  > backup.sql   #备份数据库到backup.sql文件中
 mysql> CREATE DATABASE TEST1;   #创建一个数据库
 mysql> SHOW MASTER STATUS;   #记下现在的position
[root@node1 ~]# cp /var/lib/mysql/mysql-bin.000003 /root  #备份二进制文件
[root@node1 ~]# service mysqld stop   #停止MySQL
[root@node1 ~]# rm -rf /var/lib/mysql/*   #删除所有的数据文件
[root@node1 ~]# service mysqld start    #启动MySQL, 如果是编译安装的应该不能启动(需重新初始化), 
如果rpm安装则会重新初始化数据库
mysql> SHOW DATABASES;   #查看数据库, 数据丢失!
mysql> SET sql_log_bin=OFF;   #暂时先将二进制日志关闭  
mysql> source backup.sql  #恢复数据，所需时间根据数据库时间大小而定
mysql> SET sql_log_bin=ON; 开启二进制日志
mysql> SHOW DATABASES;   #数据库恢复, 但是缺少TEST1
[root@node1 ~]# mysqlbinlog --start-position=106 --stop-position=191 mysql-bin.000003 | mysql employees
#通过二进制日志增量恢复数据
mysql> SHOW DATABASES;    #现在TEST1出现了！



mysqldump -h主机名 -u用户名 -p密码 数据库名字 > 备份的数据库名字.sql
#mysqldump -uroot -padmin123 shoping > backup.sql 

直接将MySQL数据库压缩备份
mysqldump -h主机名 -u用户名 -p密码 数据库名字  | gzip >备份的数据库名字.sql.gz

备份MySQL数据库某个(些)表
mysqldump -h主机名 -u用户名 -p密码 数据库名字 数据库表名1 数据库其他表名2 > 备份数据库名字.sql

同时备份多个MySQL数据库
mysqldump -h主机名 -u用户名 -p密码 --databases 需要备份的数据库名字1 需要备份的数据库名字2  > 备份数据库名字.sql

仅仅备份数据库结构
mysqldump --no-data -h主机名 -u用户名 -p密码 --databases 需要备份的数据库名字1 需要备份的数据库名字2  > 
备份数据库名字.sql

备份服务器上所有数据库
mysqldump --all-databases -h主机名 -u用户名 -p密码 > 备份数据库名字.sql

还原：mysql
mysql -h主机名 -u用户名 -p密码        需要恢复的数据库名字  <      已备份的数据库名字（见上）.sql 

还原压缩的MySQL数据库
gunzip < 刚开始备份集中的数据库名字.sql.gz | mysql -u用户名字 -p用户密码 需要恢复的数据库名字

将数据库转移到新服务器
mysqldump备份 -u账号 -p密码 需要恢复的数据库名字 |mysql还原 –host=192.168.199.100 -C 需要恢复的数据库名字
注意：执行上面这条命令之前，需要先在被还原机器上，授权。
授权：http://blog.csdn.net/u010098331/article/details/50730309（参考）



3>、lvm2快照+复制BIN LOGS    数据量一般，又不过分影响业务
http://www.360doc.com/content/13/0522/16/11801283_287305129.shtml

环境部署

添加硬盘; 这里我们直接实现SCSI硬盘的热插拔, 首先在虚拟机中添加一块硬盘, 不重启
[root@node1 ~]# ls /dev/sd*   #只有以下几块硬盘, 但是我们不重启可以让系统识别新添加的硬盘
[root@node1 ~]# echo '- - -' > /sys/class/scsi_host/host0/scan 
[root@node1 ~]# echo '- - -' > /sys/class/scsi_host/host1/scan 
[root@node1 ~]# echo '- - -' > /sys/class/scsi_host/host2/scan 
[root@node1 ~]# ls /dev/sd*    #看！sdb识别出来了
/dev/sda  /dev/sda1  /dev/sda2  /dev/sdb
[root@node1 ~]# fdisk /dev/sdb   #分区
##创建逻辑卷
[root@node1 ~]# pvcreate /dev/sdb1
  Physical volume "/dev/sdb1" successfully created
[root@node1 ~]# vgcreate myvg /dev/sdb1 
  Volume group "myvg" successfully created
[root@node1 ~]# lvcreate -n mydata -L 5G myvg 
  Logical volume "mydata" created.
[root@node1 ~]# mkfs.ext4 /dev/mapper/myvg-mydata   #格式化
[root@node1 ~]# mkdir /lvm_data
[root@node1 ~]# mount /dev/mapper/myvg-mydata /lvm_data  #挂载到/lvm_data
[root@node1 ~]# vim /etc/my.cnf    #修改mysql配置文件的datadir如下
   datadir=/lvm_data
[root@node1 ~]# service mysqld restart  #重启MySQL
####重新导入employees数据库########略过####


创建快照卷并备份
mysql> FLUSH TABLES WITH READ LOCK;     #锁定所有表
[root@node1 lvm_data]# lvcreate -L 1G -n mydata-snap -p r -s /dev/mapper/myvg-mydata   #创建快照卷
  Logical volume "mydata-snap" created.
mysql> UNLOCK TABLES;  #解锁所有表
[root@node1 lvm_data]# mkdir /lvm_snap  #创建文件夹
[root@node1 lvm_data]# mount /dev/myvg/mydata-snap /lvm_snap/  #挂载snap
    mount: block device /dev/mapper/myvg-mydata--snap is write-protected, mounting read-only
[root@node1 lvm_data]# cd /lvm_snap/
[root@node1 lvm_snap]# ls
   employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql-bin.000001  mysql-bin.000002  mysql-bin.000003  mysql-bin.index  test
[root@node1 lvm_snap]# tar cf /tmp/mysqlback.tar *  #打包文件到/tmp/mysqlback.tar
[root@node1 ~]# umount /lvm_snap/  #卸载snap
[root@node1 ~]# lvremove myvg mydata-snap  #删除snap


恢复数据
[root@node1 lvm_snap]# rm -rf /lvm_data/*
[root@node1 ~]# service mysqld start    #启动MySQL, 如果是编译安装的应该不能启动(需重新初始化), 
如果rpm安装则会重新初始化数据库
mysql> SHOW DATABASES;   #查看数据库, 数据丢失!
[root@node1 ~]# cd /lvm_data/
[root@node1 lvm_data]# rm -rf * #删除所有文件
[root@node1 lvm_data]# tar xf /tmp/mysqlback.tar     #解压备份数据库到此文件夹 
[root@node1 lvm_data]# ls  #查看当前的文件
employees  ibdata1  ib_logfile0  ib_logfile1  mysql  mysql-bin.000001  mysql-bin.000002  mysql-bin.000003  mysql-bin.index  test
mysql> SHOW DATABASES;  #数据恢复了



4、xtrabackup    数据量大，又不过分影响业务
为了更好地演示，我们这次使用mariadb-5.5的版本, 使用xtrabackup使用InnoDB能够发挥其最大功效,
 并且InnoDB的每一张表必须使用单独的表空间, 
我们需要在配置文件中添加 innodb_file_per_table = ON 来开启

下载安装xtrabackup
我们这里通过wget percona官方的rpm包进行安装
[root@node1 ~]# wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.3.4/binary/redhat/6/x86_64/percona-xtrabackup-2.3.4-1.el6.x86_64.rpm   
[root@node1 ~]# yum localinstall percona-xtrabackup-2.3.4-1.el6.x86_64.rpm   #需要EPEL源


备份过程
[root@node1 ~]# mkdir /extrabackup  #创建备份目录
[root@node1 ~]# innobackupex --user=root /extrabackup/ #备份数据
###################提示complete表示成功*********************
[root@node1 ~]# ls /extrabackup/  #看到备份目录

一般情况, 备份完成后, 数据不能用于恢复操作, 因为备份的数据中可能会包含尚未提交的事务或已经提交但尚未同步至数据文件中的事务。
因此, 此时的数据文件仍不一致, 所以我们需要”准备”一个完全备份
[root@node1 ~]# innobackupex --apply-log /extrabackup/2016-04-27_07-30-48/  #指定备份文件的目录

#一般情况下下面三行结尾代表成功*****************
InnoDB: Starting shutdown...
InnoDB: Shutdown completed; log sequence number 369661462
160427 07:40:11 completed OK!

[root@node1 ~]# cd /extrabackup/2016-04-27_07-30-48/
[root@node1 2016-04-27_07-30-48]# ls -hl  #查看备份文件
total 31M
-rw-r----- 1 root root  386 Apr 27 07:30 backup-my.cnf
drwx------ 2 root root 4.0K Apr 27 07:30 employees
-rw-r----- 1 root root  18M Apr 27 07:40 ibdata1
-rw-r--r-- 1 root root 5.0M Apr 27 07:40 ib_logfile0
-rw-r--r-- 1 root root 5.0M Apr 27 07:40 ib_logfile1
drwx------ 2 root root 4.0K Apr 27 07:30 mysql
drwx------ 2 root root 4.0K Apr 27 07:30 performance_schema
drwx------ 2 root root 4.0K Apr 27 07:30 test
-rw-r----- 1 root root   27 Apr 27 07:30 xtrabackup_binlog_info
-rw-r--r-- 1 root root   29 Apr 27 07:40 xtrabackup_binlog_pos_innodb
-rw-r----- 1 root root  117 Apr 27 07:40 xtrabackup_checkpoints
-rw-r----- 1 root root  470 Apr 27 07:30 xtrabackup_info
-rw-r----- 1 root root 2.0M Apr 27 07:40 xtrabackup_logfile



mysql 拒绝访问 1044 解决方案
在服务器上用mysql -h 192.168.0.1 -u root -p mysql命令登录mysql数据库
然后用grant命令下放权限
GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY 'root-password' WITH GRANT OPTION;

GRANT ALL PRIVILEGES ON *.* TO root@127.0.0.1 IDENTIFIED BY 'root-password' WITH GRANT OPTION;

注意：自己根据情况修改以上命令中的 “用户”“ip地址”“密码”




