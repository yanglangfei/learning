https://www.cnblogs.com/caoguo/p/4625662.html 

1、下载redis安装包
下载链接  http://redis.io/download
$ wget http://download.redis.io/releases/redis-2.8.17.tar.gz

2、解压压缩包
$ tar xzf redis-2.8.17.tar.gz
$ cd redis-2.8.17

3、安装redis
$ make

4、启动redis
$ cd src
$ ./redis-server

默认配置启动redis
$ cd src
$ ./redis-server ../redis.conf


5、操作 redis

$ ./redis-cli
redis> set foo bar
OK
redis> get foo
"bar"



6、主从复制配置


原理:
1>当一个从数据库启动时，会向主数据库发送sync命令，
2>主数据库接收到sync命令后会开始在后台保存快照（执行rdb操作），
并将保存期间接收到的命令缓存起来
3>当快照完成后，redis会将快照文件和所有缓存的命令发送给从数据库。
4>从数据库收到后，会载入快照文件并执行收到的缓存的命令。

注意：redis2.8之前的版本：当主从数据库同步的时候从数据库因为网络原因断开重连后
会重新执行上述操作，不支持断点续传。 redis2.8之后支持断点续传。


方式1：手动修改配置文件
只需要额外修改从节点中redis的配置文件中的slaveof属性即可
slaveof 192.168.33.130 6379  

启动主节点和从节点上面的redis，查看redis的info信息
#Replication

方式2：动态设置
通过redis-cli 连接到从节点服务器，执行下面命令即可。
slaveof 192.168.33.130 6379

注意：
如果你使用主从复制，那么要确保你的master激活了持久化，
或者确保它不会在当掉后自动重启。原因slave是master的完整备份，
因此如果master通过一个空数据集重启，slave也会被清掉。

在配置redis复制功能的时候如果主数据库设置了密码，
需要在从数据的配置文件中通过masterauth参数设置主数据库的密码，
这样从数据库在连接主数据库时就会自动使用auth命令认证了。相当于做了一个免密码登录。




redis的Sentinel 哨兵模式
redis的sentinel系统用于管理多个redis服务器，该系统主要执行三个任务：
监控、提醒、自动故障转移。

1、主观下线状态
  当一个sentinel认为一个redis服务连接不上的时候，会给这个服务打个标记为下线状态。
2、客观下线状态
  当多个sentinel认为一个redids连接不上的时候，则认为这个redis服务确实下线了。
  这里的多个sentinel的个数可以在配置文件中设置。

主节点：主观下线和客观下线
从节点：主观下线状态

sentinel配置
修改sentinel.conf文件
sentinel monitor mymaster 192.168.33.130 6379 2     #最后一个参数视情况决定 
最后一个参数为需要判定客观下线所需的主观下线sentinel个数，这个参数不可以大于sentinel个数。

启动sentinel
redis-sentinel sentinel.conf  

sentinel的一些命令
INFO    #sentinel的基本状态信息
SENTINEL masters   #列出所有被监视的主服务器，以及这些主服务器的当前状态
SENTINEL slaves <master name>    #列出给定主服务器的所有从服务器，以及这些从服务器的当前状态
SENTINEL get-master-addr-by-name <master name>  #返回给定名字的主服务器的 IP 地址和端口号
SENTINEL reset <pattern>   #重置所有名字和给定模式 pattern 相匹配的主服务器。重置操作清除主服务器目前的所有状态， 包括正在执行中的故障转移， 并移除目前已经发现和关联的， 主服务器的所有从服务器和 Sentinel 。
SENTINEL failover <master name>  #当主服务器失效时， 在不询问其他 Sentinel 意见的情况下， 强制开始一次自动故障迁移，但是它会给其他sentinel发送一个最新的配置，其他sentinel会根据这个配置进行更新



redis集群
修改配置文件redis.conf
daemonize yes  
port 6379  
cluster-enabled yes  
cluster-config-file nodes.conf  
cluster-node-timeout 5000  

1、首先我们创建6个以端口为名称的文件夹（由于每个redis节点启动的时候，
都会在当前文件夹下创建快照文件，所以我们需要创建每个节点的启动目录）
我们要创建的6个redis节点，其中三个为主节点，三个为从节点，
对应的redis节点的ip和端口对应关系如下：
mkdir 7000  
.
.
2、接下来把每个节点启动所需要的配置文件拷贝到相应的启动目录：
cp redis.conf  7000  

3、然后我们进入每个启动目录，修改之前拷贝的redis.conf文件中的端口port 为上面列出的对应端口。
最终每个节点的配置类似于
daemonize yes  
port 6379     #只有端口不同，其他相同  
cluster-enabled yes  
cluster-config-file nodes.conf  
cluster-node-timeout 5000  

4、进入每个启动目录，以每个目录下的redis.conf文件启动
redis-server redis-conf
查看启动状态
ps -ef | grep redis  


5、创建集群命令
redis-trib.rb  create --replicas 1 192.168.33.130:7000 
192.168.33.130:7001 192.168.33.130:7002 192.168.33.130:7003 
192.168.33.130:7004 192.168.33.130:7005 


执行上面的命令的时候可能会报错，因为是执行的ruby的脚本，需要ruby的环境
所以我们需要安装ruby的环境，这里推荐使用yum安装：
yum install ruby  

安装ruby后，执行命令可能还会报错，提示缺少rubygems组件，使用yum安装
yum install rubygems  

上面两个步骤后，执行创建集群目录可能还会报错，提示不能加载redis，
是因为缺少redis和ruby的接口，使用gem 安装
gem install redis  

6、接下来我们使用命令进入集群环境
redis-cli -c -p 7000  

查看集群中所有的节点
redis-cli -c -p 7000 cluster nodes [| grep master]


添加新节点

1、首先把需要添加的节点启动
创建7006目录，拷贝7000中的redis.conf到7006中，然后修改端口port为7006，
修改好后进入7006目录启动这个节点：
redis-server redis.conf  

2、执行以下命令，将这个新节点添加到集群中：
redis-trib.rb add-node 192.168.33.130:7006 192.168.33.130:7000  

3、执行命令查看刚才新增的节点：
redis-cli -c -p 7000 cluster nodes  

4、增加了新的节点之后，这个新的节点可以成为主节点或者是从节点
4.1将这个新增节点变成从节点
前面我们已经把这个新节点添加到集群中了，现在我们要让新节点成为192.168.33.130:7001的从节点，
只需要执行下面的命令就可以了，命令后面的节点ID就是192.168.33.130:7001的节点ID。
（注意，这个从节点哈希槽必须为空，如果不为空，则需要转移掉哈希槽使之为空）

redis-cli -c -p 7006 cluster replicate a246963893faf03c45cc19ef4188f82f5393bfef  

使用下面命令来确认一下192.168.33.130:7006是否已经成为192.168.33.130:7001的从节点。
redis-cli -p 7000 cluster nodes | grep slave | grep a246963893faf03c45cc19ef4188f82f5393bfef  

4.2、将这个新增节点变成主节点：
使用redis-trib程序，将集群中的某些哈希槽移动到新节点里面，这个新节点就成为
真正的主节点了。执行下面的命令对集群中的哈希槽进行移动：
redis-trib.rb reshard 192.168.33.130:7000  

命令执行后，系统会提示我们要移动多少哈希槽，这里移动1000个
然后还需要指定把这些哈希槽转移到哪个节点上    输入我们刚才新增的节点的ID

然后需要我们指定转移哪几个几点的哈希槽
输入all 表示从所有的主节点中随机转移，凑够1000个哈希槽

然后再输入yes，redis集群就开始分配哈希槽了。
至此，一个新的主节点就添加完成了，执行命令查看现在的集群中节点的状态
redis-cli -c -p 7000 cluster nodes  


Redis集群删除节点

1、如果删除的节点是主节点，这里我们删除192.168.33.130:7006节点，
这个节点有1000个哈希槽
首先要把节点中的哈希槽转移到其他节点中，执行下面的命令
redis-trib.rb reshard 192.168.33.130:7000  
系统会提示我们要移动多少哈希槽，这里移动1000个，因为192.168.33.130:7006节点有1000个哈希槽。
然后系统提示我们输入要接收这些哈希槽的节点的ID，这里使用192.168.33.130:7001的节点ID
然后要我们选择从那些节点中转出哈希槽，这里一定要输入192.168.33.130:7006这个节点的ID
最后输入done表示输入完毕。

最后一步，使用下面的命令把这个节点删除
redis-trib.rb del-node 192.168.33.130:7000 
d113e0f033c98e2f6b88fb93e6e98866256d85c4    //最后一个参数为需要删除的节点ID


2、如果是从节点，直接删除即可。
redis-trib.rb del-node 192.168.33.130:7000 
d113e0f033c98e2f6b88fb93e6e98866256d85c4   //最后一个参数为需要删除节点的ID



https://blog.csdn.net/u011204847/article/details/51307044  

  












 











  





 













 








